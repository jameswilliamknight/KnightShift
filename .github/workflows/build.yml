name: Build Multi-Platform Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: x64
            runner: ubuntu-latest
            runtime: linux-x64
            artifact: knightshift-linux-x64

          - os: linux
            arch: arm64
            runner: ubuntu-latest
            runtime: linux-arm64
            artifact: knightshift-linux-arm64

          # Windows builds
          - os: windows
            arch: x64
            runner: windows-latest
            runtime: win-x64
            artifact: knightshift-windows-x64.exe

          - os: windows
            arch: arm64
            runner: windows-latest
            runtime: win-arm64
            artifact: knightshift-windows-arm64.exe

          # macOS builds
          - os: macos
            arch: x64
            runner: macos-latest
            runtime: osx-x64
            artifact: knightshift-macos-x64

          - os: macos
            arch: arm64
            runner: macos-latest
            runtime: osx-arm64
            artifact: knightshift-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and Publish
        run: dotnet publish src/KnightShift/KnightShift.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true --output ./publish/${{ matrix.runtime }}
        shell: bash

      - name: List published files (Debug)
        run: ls -R ./publish/${{ matrix.runtime }}
        shell: bash

      - name: Prepare artifact (Unix)
        if: matrix.os != 'windows'
        run: |
          mkdir -p ./artifacts
          mv ./publish/${{ matrix.runtime }}/KnightShift ./artifacts/${{ matrix.artifact }}
          chmod +x ./artifacts/${{ matrix.artifact }}
        shell: bash

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows'
        run: |
          mkdir -p ./artifacts
          mv ./publish/${{ matrix.runtime }}/KnightShift.exe ./artifacts/${{ matrix.artifact }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ./artifacts/${{ matrix.artifact }}
          retention-days: 90

  create-release-assets:
    name: Create Release Assets Summary
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts

      - name: Display structure
        run: ls -R ./all-artifacts

      - name: Create checksums
        run: |
          cd ./all-artifacts
          find . -type f -exec sha256sum {} \; > ../checksums.txt
          cat ../checksums.txt

      - name: Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: checksums
          path: checksums.txt
          retention-days: 90

      - name: Prepare release files
        run: |
          mkdir -p ./release-assets
          find ./all-artifacts -type f -exec cp {} ./release-assets/ \;
          cp checksums.txt ./release-assets/
          ls -lh ./release-assets/

      - name: Determine next version
        id: version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the latest pre-alpha release TAG (3rd column)
          LATEST=$(gh release list --repo ${{ github.repository }} --limit 100 | grep "pre-alpha" | head -n1 | awk '{print $3}' || echo "v0.1.0-pre-alpha")
          echo "Latest version: $LATEST"

          # Extract version numbers (e.g., v0.1.2-pre-alpha -> 0.1.2)
          VERSION=$(echo $LATEST | sed 's/v\(.*\)-pre-alpha/\1/')

          # Split into major.minor.patch
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}-pre-alpha"

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --repo ${{ github.repository }} \
            --title "Pre-Alpha ${{ steps.version.outputs.version }}" \
            --notes "ðŸš§ **Automated Pre-Alpha Build**

          Built from commit: ${{ github.sha }}

          ## Downloads

          Choose the binary for your platform:
          - **Linux x64**: \`knightshift-linux-x64\`
          - **Linux ARM64**: \`knightshift-linux-arm64\`
          - **Windows x64**: \`knightshift-windows-x64.exe\`
          - **Windows ARM64**: \`knightshift-windows-arm64.exe\`
          - **macOS x64** (Intel): \`knightshift-macos-x64\`
          - **macOS ARM64** (Apple Silicon): \`knightshift-macos-arm64\`
          - **Checksums**: \`checksums.txt\`

          ## Installation

          ### Linux/macOS
          \`\`\`bash
          # Download the appropriate binary
          chmod +x knightshift-*
          sudo mv knightshift-* /usr/local/bin/knightshift
          \`\`\`

          ### Windows
          Place the .exe file in a directory in your PATH.

          ---
          ðŸ¤– Auto-built with [Claude Code](https://claude.com/claude-code)" \
            --prerelease \
            ./release-assets/*
